import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class GameController {


    private ChessBoardPanel gamePanel;
    private StatusPanel statusPanel;
    private ChessPiece currentPlayer;
    private int blackScore;
    private int whiteScore;

    public GameController(ChessBoardPanel gamePanel, StatusPanel statusPanel) {
        this.gamePanel = gamePanel;
        this.statusPanel = statusPanel;
        this.currentPlayer = ChessPiece.BLACK;
        blackScore = 2;
        whiteScore = 2;
    }

    public void swapPlayer() {
       // countScore();
        currentPlayer = (currentPlayer == ChessPiece.BLACK) ? ChessPiece.WHITE : ChessPiece.BLACK;
        statusPanel.setPlayerText(currentPlayer.name());
        //statusPanel.setScoreText(blackScore, whiteScore);
    }


    public void countScore(int[][] a) {//直接通过这个得到黑棋和白棋在当前棋盘的成绩，并通过静止的棋盘输出黑棋和白棋当前的成绩。
        //先获取状态，之后完善这个方法
        //todo: modify the countScore method
        clearScore() ;
        for(int i=0;i< gamePanel.getCHESS_COUNT();i++){
            for(int j=0;j< gamePanel.getCHESS_COUNT();j++){
                if(a[i][j]==-1){
                    blackScore++;
                }
                if(a[i][j]==1){
                    whiteScore++;
                }
            }
        }
    }
    public void clearScore(){
        blackScore =0;
        whiteScore =0;
    }


    public ChessPiece getCurrentPlayer() {
        return currentPlayer;
    }

    public ChessBoardPanel getGamePanel() {
        return gamePanel;
    }


    public void setGamePanel(ChessBoardPanel gamePanel) {
        this.gamePanel = gamePanel;
    }


    public void readFileData(String fileName) {
        //todo: read date from file
        List<String> fileData = new ArrayList<>();
        int[][] dataS;
        try {
            FileReader fileReader = new FileReader(fileName);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                fileData.add(line);
            }
            fileData.forEach(System.out::println);
            dataS  = new int[fileData .size()][];
            for(int i=0;i<fileData .size() ;i++){
                String [] str = fileData .get(i).split(" ");
                dataS [i]= new int[str .length ];
                for(int j=0;j<str .length ;j++){
                    dataS [i][j] = Integer .parseInt(str [j]);
                }
            }
            gamePanel .loadGameByData(dataS);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void writeDataToFile(String fileName) {
        //todo: write data into file
        try {
            FileWriter myWriter = new FileWriter(fileName);
            int m=gamePanel.getgamedata().length;
            for(int i=0;i<m;i++){
                for(int j=0;j<m;j++){
                    myWriter.write(gamePanel.getgamedata()[i][j]+" ");}
                myWriter.write("\r\n");
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        }
    } catch (IOException e) {
            e.printStackTrace();
        }
    }




    public boolean canClick(int row, int col) {
        return gamePanel.canClickGrid(row, col, currentPlayer);
    }
}





    public boolean canClick(int row, int col) {
        return gamePanel.canClickGrid(row, col, currentPlayer);
    }
}
